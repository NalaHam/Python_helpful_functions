************************************************** First half of Semester *****************************************************************

#expressions

% called modulus gives remainders after division
ex: 8%3 = 2 because 8/3 = 6 * (2/3)

// called floor divison gives closest whole number of divison
ex: 7//3 = 2 and 27//157890 = 0

x += 3 is the same as x = x + 3 

== is equal to
!= is not equal to 

32//8 == 32.0/8 is TRUE because 4 = 4.0


#sep and end

print("Hello",'World', 1)             # will print Hello World 1
print("Hello",'World', 1, sep='_')    # will print Hello_World_1
print("Hello",'World', 1, sep='taco') # will print HellotacoWorldtaco1
print("Hello",'World', 1, sep='')     # will print HelloWorld1
print("Hello",'World', 1, sep=' ')    # the default behavior


for i in range(5):
print(i,end="")       # will print 01234
print()               #goes to a new line of output

#Nested loops:
#create 10 8 6 4 2 0 
         8 6 4 2 0
         6 4 2 0
         4 2 0 
         2 0
         0

for row in range(10,0,-2):
    n = row
    for i in range(n,0,-2):
        print(i, " ", end = "")
    print()
    
************************************************** Second half of Semester *****************************************************************
    
`````````````````` transforming and commands ````````````````````

#List Methods:
mylist = []
mylist.append(5)
mylist.append(27)
mylist.append(3)
mylist.append(12)
print(mylist)             #[5, 27, 3, 12] 
                          #used for following commands

#insert
mylist.insert(1, 12)
print(mylist)             #[5, 12, 27, 3, 12]
print(mylist.count(12))   #2

#index
print(mylist.index(3))    #3
print(mylist.count(5))    #1

#reverse
mylist.reverse()
print(mylist)             #[12, 3, 27, 12, 5]

#sort
mylist.sort()
print(mylist)             #[3, 5, 12, 12, 27]

#remove
mylist.remove(5)
print(mylist)             #[3, 12, 12, 27]

#pop(n)
lastitem = mylist.pop()   #n is the index of what you want to delete. If it is not given it is assumed to be the last item in list. 
print(lastitem)           #27
print(mylist)             #[3, 12, 12]


#concatenation
#to concatenate a list, you must add a list to another
origlist = [45,32,88]
newlist = origlist + ['cat'] #[45,32,88, 'cat']

#capitalization
ss = "Hello, World"       #used for the following commands
print(ss.upper())         #gives HELLO, WORLD
print(ss.lower())         #gives hello, world


#count
ss = "Hello, World"
print(ss.count("l"))      # 3

#strip: Returns a string with the leading and trailing whitespace removed
ss = "Hello, World"
print("***"+ss.strip()+"***") # ***Hello, World***

#replace: with parameters old, new. 
ss = "Hello, World"
print(ss.replace("o", "*")) #Hell*, W*rld

#split
wrds = "Hello, world!"
wrds_list = wrds.split(",") #gives ["Hello","world!"] 


#format examples:
#ex1
scores = [("Rodney Dangerfield", -1), ("Marlon Brando", 1), ("You", 100)]
for person in scores:
    name = person[0]
    score = person[1]
    print("Hello {}. Your score is {}.".format(name, score))
    
                          #to make the formating give a float with 2 decimal places use {:.2f}
                          #to include {} in what is printed inside the format use {{}}
                          
#ex2
inventory = ["shoes, 12, 29.99", "shirts, 20, 9.99", "sweatpants, 25, 15.00", "scarves, 13, 7.75"]

for item in inventory:
    item = item.split(",")
    name = item[0]
    number = item[1]
    cost = item[2]
    print("The store has{} {}, each for{} USD.".format(number, name, cost))


#appending example:
verbs = ["kayak", "cry", "walk", "eat", "drink", "fly"]
ing = []
for word in verbs: 
    ing.append(word +"ing")
    
print(ing)                #["kayaking", "crying", "walking", "eating", "drinking", "flying"]



`````````````````` file stuff ````````````````````

#open
open(filename,'r')        #Open a file called filename and use it for reading. This will return a reference to a file object.

open(filename,'w')        #Open a file called filename and use it for writing. This will also create a new file with that name if one doesn't exist yet

filevariable.close()      #File use is complete.

#write
filevariable.write(string) #add a string to the end of the file

#read(n)
filevariable.read()       #read and reutrn a string of n characters, or the whole thing if n isn't provided

#readline(n)              
filevariable.readline()   #Read and return the next line of the file with all text up to and including the newline character. 
                          #If n is provided as a parameter, then only n characters will be returned if the line is longer than n. 

#readlines(n)            
filevariable.readlines()  #Returns a list of strings, each representing a single line of the file. If n is not provided then all 
                          #lines of the file are returned. If n is provided then n characters are read but n is rounded up so 
                          #that an entire line is returned.
                          #can then use a for loop to iterate through the strings in the list

#split method:
olypmicsfile = open("olypmics.txt", "r")

for aline in olypmicsfile.readlines():
    values = aline.split(",")       #for each line, split breaks the line into a list with each element being separated by a comma in the og line
    
    print(values[0], "is from", values[3], "and is on the roster for", values[4])

olypmicsfile.close()

#with statements:
with open('mydata.txt', 'r') as md:    #instead of assigning and using for loop and then md.close()
    lines = md.readlines()
    for lin in lines:
        print(lin)


with open(fname, 'r') as fileref:      #for larger data
 for lin in fileref:
     ## some code that uses line as the current line of the file
     ## some more code

#example of writing a csv file:
olympians = [("John Aalberg", 31, "Cross Country Skiing"),
             ("Minna Maarit Aalto", 30, "Sailing"),
             ("Win Valdemar Aaltonen", 54, "Art Competitions"),
             ("Wakako Abe", 18, "Cycling")]

outfile = open("reduced_olympics.csv", "w")
# output the header row
outfile.write('Name,Age,Sport')
outfile.write('\n')
# output each of the rows:
for olympian in olympians:
    row_string = '{},{},{}'.format(olympian[0], olympian[1], olympian[2])  #to have quotation marks for each of the items use '"{}","{}","{}"'
    outfile.write(row_string)
    outfile.write('\n')
outfile.close()



















